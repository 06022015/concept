package com.concept.java.solution;


import com.concept.java.Base;

import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: ashqures
 * Date: 4/8/17
 * Time: 11:54 AM
 * To change this template use File | Settings | File Templates.
 */
/*
* Find the top k frequent items in a stream of numbers Space O(k)
* Reference URL http://www.programcreek.com/2014/05/leetcode-top-k-frequent-elements-java/
*
* */


public class KFrequentElement extends Base {

    static class NumberFrequency{
        public int number;
        public int frequency;

        public NumberFrequency(int number, int frequency){
            this.number = number;
            this.frequency = frequency;
        }
    }
    
    public Map<Integer,Integer> getStreamData(int stream[]){
        Map<Integer, Integer> streamMap = new HashMap<Integer, Integer>();
        for(int input : stream){
            if(streamMap.containsKey(input))
                streamMap.put(input,streamMap.get(input)+1);
            else
                streamMap.put(input,1);
        }
        return streamMap;
    }

    public int [] findFrequentElementThroughMapSorting(int stream[], int k){
        Map<Integer, Integer> streamMap = getStreamData(stream);
        List<Map.Entry<Integer,Integer>> unsortedEntry = new LinkedList<Map.Entry<Integer, Integer>>(streamMap.entrySet());
        Collections.sort(unsortedEntry, new ComparatorImp());
        int elements[] = new int[k];
        for(int i=0;i<k;i++){
            elements[i] = unsortedEntry.get(i).getKey();
        }
        return elements;
    }
    
    public NumberFrequency [] findFrequentElementUsingHeapSort(int stream[], int k){
        Map<Integer, Integer> streamMap = getStreamData(stream);
        NumberFrequency[] numberFrequency = new NumberFrequency[k];
        int pos = 0;
        for(int key: streamMap.keySet()){
            if(pos > k-1){
                int lastElementValue = numberFrequency[k-1].frequency;
                int keyValue = streamMap.get(key);
                if(keyValue>lastElementValue){
                    numberFrequency[k-1] = new NumberFrequency(key, streamMap.get(key));
                    sort(numberFrequency);
                }
            }else{
                numberFrequency[pos] = new NumberFrequency(key, streamMap.get(key));
                if(pos==k-1)
                    sort(numberFrequency);
            }
            //printNumberFrequency(numberFrequency);
            pos++;
        }
        return numberFrequency;
    }

    public void printNumberFrequency(NumberFrequency numberFrequencies[]){
        for(NumberFrequency numberFrequency1 : numberFrequencies){
            if(null != numberFrequency1)
            System.out.print(numberFrequency1.number+"\t");
        }
        System.out.println();
    }

    public void sort(NumberFrequency input[]){
        heapify(input);
        for (int i = input.length - 1; i >= 0; i--) {
            swap(input, 0, i);
            minHeap(input, 0, i);
        }
    }


    public void heapify(NumberFrequency input[]){
        for(int i=input.length/2;i>=0;i--)
            minHeap(input, i, input.length);
    }

    public void minHeap(NumberFrequency  input[], int pos, int  length){
        int left = 2* pos;
        int right = 2* pos+1;
        int min = pos;
        if(left< length && input[left].frequency < input[min].frequency)
            min = left;
        if(right<length && input[right].frequency < input[min].frequency)
            min = right;
        if(min!=pos){
            swap(input, pos, min);
            minHeap(input, min,length);
        }
    }

    protected void swap(NumberFrequency input[], int i, int j) {
        NumberFrequency temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
    
    public static void main(String args[]){
        KFrequentElement frequentElement = new KFrequentElement();
        int input[] = {63,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,
                5,6,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,45,56,78,32,34,67,54,567,54,34,87,90,87,89,765,234,5432,345,567,654,567,654,678,765,6789,876,23,54,56,67,87,98,32,34,55,66,77,88,99,23,54,67,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234,1,2,3,4,5,6,7,3,5,1,5,3,3,3,7,7,9,45,6,7,65,7,8,22,4,2,5,6,7,90,98,76,32,12,32,43,45,54,76,48,76,78,9,6,234};
        int k = 15;
        /*frequentElement.printArray(input);
        System.out.println();
        NumberFrequency numberFrequency[] = new NumberFrequency[input.length];
        for(int i=0; i<input.length;i++){
            numberFrequency[i] = new NumberFrequency(i, input[i]);
        }
        frequentElement.sort(numberFrequency);
        for(NumberFrequency numberFrequency1 : numberFrequency){
            System.out.print(numberFrequency1.frequency+"-"+numberFrequency1.number+"\t");
        }*/
        System.out.println("Input length:- "+ input.length);
        System.out.println("K frequent element using heap");
        System.out.println("Time:- "+ new Date().getTime());
        NumberFrequency elements[] = frequentElement.findFrequentElementUsingHeapSort(input, k);
        System.out.println("Time:- "+ new Date().getTime());
        frequentElement.printNumberFrequency(elements);

        System.out.println("K frequent element using map");
        System.out.println("Time:- "+ new Date().getTime());
        int elements1[] = frequentElement.findFrequentElementThroughMapSorting(input, k);
        System.out.println("Time:- "+ new Date().getTime());
        frequentElement.printArray(elements1);

    }
    

    static class ComparatorImp implements Comparator<Map.Entry<Integer,Integer>>{

        @Override
        public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
            return o2.getValue().compareTo(o1.getValue());
        }
    }

}
